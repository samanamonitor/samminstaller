# rsyslog configuration file
#
# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html
# or latest version online at http://www.rsyslog.com/doc/rsyslog_conf.html
# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html


#### Global directives ####
# {{{{

global(processInternalMessages="on")
$PreserveFQDN on

# Sets the directory that rsyslog uses for work files.
$WorkDirectory /var/lib/rsyslog

$PrivDropToUser rsyslog
$PrivDropToGroup adm

# Sets default permissions for all log files.
$FileOwner rsyslog
$FileGroup adm
$DirOwner rsyslog
$DirGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022

# Check config syntax on startup and abort if unclean (default off).
$AbortOnUncleanConfig on

# Reduce repeating messages (default off).
$RepeatedMsgReduction on

# Include all config files in /etc/rsyslog.d/.
# include(file="/etc/rsyslog.d/*.conf" mode="optional")

# }}}}

#### Modules ####
# {{{

# Provides --MARK-- message capability.
module(load="immark")

module(load="impstats") # config.enabled="true")

# Provides support for local system logging (e.g. via logger command).
module( load="imuxsock")
# module(load="imjournal")

# module(load="imtcp")  # needs to be done just once
module(load="imudp")  # needs to be done just once
# module(load="imrelp") # needs to be done just once
module(load="omrelp") # needs to be done just once

# Reads kernel messages.
# module(load="imklog")

module(load="omstdout")
module(load="mmjsonparse")
module(load="mmutf8fix")

# }}}

#### Output Format ####
# {{{

# log as json
template(name="OutFormat" type="list" option.jsonf="on") {
    property(outname="timestamp" name="timereported" dateFormat="rfc3339" format="jsonf")
    property(outname="host" name="hostname" format="jsonf")
    property(outname="fromhost" name="fromhost" format="jsonf")
    property(outname="fromhost-ip" name="fromhost-ip" format="jsonf")
    property(outname="severity" name="syslogseverity-text" caseConversion="upper" format="jsonf")
    property(outname="facility" name="syslogfacility-text" format="jsonf")
    property(outname="syslog-tag" name="syslogtag" format="jsonf")
    property(outname="source" name="app-name" format="jsonf")
    # property(outname="raw" name="rawmsg" format="jsonf")
    property(outname="message" name="msg" format="jsonf")
}

# }}}

#### Logs from Container ####
# {{{

# log container
template(name="DynaFileContainer" type="string" string="/var/log/local/container/%PROGRAMNAME%.log")

# Log all kernel messages to kern.log.
# kern.*                            /var/log/container/kern.log;OutFormat

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
# NOTE: The minus sign in front of filename disables buffer flush.
# *.info;authpriv.none;cron.none;kern.none;mail.none    -/var/log/container/messages;OutFormat

# The authpriv file has restricted access.
# authpriv.*                        /var/log/container/auth.log;OutFormat

# Log all the mail messages in one place.
# mail.*                            -/var/log/container/mail.log;OutFormat

# Log cron stuff.
# cron.*                            -/var/log/container/cron.log;OutFormat

# Everybody gets emergency messages.
*.emerg                         :omusrmsg:*

# Save boot messages also to boot.log.
# local7.*                      /var/log/container/boot.log;OutFormat

# Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                         /dev/console

#Everything forwarded to Local2 from SNMPTRAPD will be forwarded to the log aggregator
local2.* action(name="main_utf8fix" type="mmutf8fix" replacementChar="?")
& action(
    type="omfile"
    dynaFile="DynaFileContainer"
    createDirs="on"
    template="RSYSLOG_SyslogProtocol23Format"
    dynaFileCacheSize="512"
    flushOnTXEnd="off"
    asyncWriting="on"
    flushInterval="1"
    ioBufferSize="64k"
)
# # Send all logs to remote syslog via UDP.
# # An on-disk queue is created for this action. If the remote host is
# # down, messages are spooled to disk and sent when it is up again.
 & action(
     type="omfwd"
     target=`echo $FWD_TO_HOST`
     port=`echo $FWD_TO_PORT`
     protocol=`echo $FWD_PROTOCOL`
     template="RSYSLOG_SyslogProtocol23Format"
     action.reportSuspension="on"
     action.reportSuspensionContinuation="on"
     action.resumeInterval="30"
     action.resumeRetryCount="-1"
     queue.SpoolDirectory="/var/spool/rsyslog"
     queue.filename="rsyslog-fwd-rule-container"  # unique name prefix for spool files
     queue.highwatermark="13000"
     queue.lowwatermark="50"
     queue.maxdiskspace="256m"
     queue.saveonshutdown="on"
     queue.size="15000"
     queue.type="LinkedList"
     ResendLastMSGOnReconnect="on"
 )

# log everything container local inside data/log/local/container
*.* action(name="main_utf8fix" type="mmutf8fix" replacementChar="?")
& action(
    type="omfile"
    dynaFile="DynaFileContainer"
    createDirs="on"
    template="RSYSLOG_SyslogProtocol23Format"
    dynaFileCacheSize="512"
    flushOnTXEnd="off"
    asyncWriting="on"
    flushInterval="1"
    ioBufferSize="64k"
)
# # Send all logs to remote syslog via UDP.
# # An on-disk queue is created for this action. If the remote host is
# # down, messages are spooled to disk and sent when it is up again.
# & action(
#     type="omfwd"
#     target=`echo $FWD_TO_HOST`
#     port=`echo $FWD_TO_PORT`
#     protocol=`echo $FWD_PROTOCOL`
#     action.reportSuspension="on"
#     action.reportSuspensionContinuation="on"
#     action.resumeInterval="30"
#     action.resumeRetryCount="-1"
#     queue.SpoolDirectory="/var/spool/rsyslog"
#     queue.filename="rsyslog-fwd-rule-container"  # unique name prefix for spool files
#     queue.highwatermark="13000"
#     queue.lowwatermark="50"
#     queue.maxdiskspace="256m"
#     queue.saveonshutdown="on"
#     queue.size="15000"
#     queue.type="LinkedList"
#     ResendLastMSGOnReconnect="on"
# )
# # forward to remote rsyslog server using relp
#& action(
#    type="omrelp"
#    target=`echo $FWD_TO_HOST`
#    port=`echo $FWD_TO_PORT`
#    action.reportSuspension="on"
#    action.reportSuspensionContinuation="on"
#    action.resumeInterval="30"
#    action.resumeRetryCount="-1"
#    queue.SpoolDirectory="/var/spool/rsyslog"
#   queue.filename="rsyslog-relp-rule-container"  # unique name prefix for spool files
#    queue.highwatermark="13000"
#    queue.lowwatermark="50"
#    queue.maxdiskspace="256m"
#    queue.saveonshutdown="on"
#    queue.size="15000"
#    queue.type="LinkedList"
#)

# }}}

#### Logs from Host ####
# {{{

# log host
template(name="DynaFileLocalMachine" type="string" string="/var/log/local/host/%PROGRAMNAME%.log")

# log everything host local inside data/log/host/container
ruleset(name="LocalMachine"){
    # fix utf8
    action(name="main_utf8fix" type="mmutf8fix" replacementChar="?")
    # dynamic file log by hostname
    action(
        type="omfile"
        dynaFile="DynaFileLocalMachine"
        createDirs="on"
        template="OutFormat"
        dynaFileCacheSize="512"
        flushOnTXEnd="off"
        asyncWriting="on"
        flushInterval="1"
        ioBufferSize="64k"
    )
    # # forward to remote rsyslog server
    # action(
    #     type="omfwd"
    #     target=`echo $FWD_TO_HOST`
    #     port=`echo $FWD_TO_PORT`
    #     protocol=`echo $FWD_PROTOCOL`
    #     action.reportSuspension="on"
    #     action.reportSuspensionContinuation="on"
    #     action.resumeInterval="30"
    #     action.resumeRetryCount="-1"
    #     queue.SpoolDirectory="/var/spool/rsyslog"
    #     queue.filename="rsyslog-fwd-rule-local"  # unique name prefix for spool files
    #     queue.highwatermark="13000"
    #     queue.lowwatermark="50"
    #     queue.maxdiskspace="256m"
    #     queue.saveonshutdown="on"
    #     queue.size="15000"
    #     queue.type="LinkedList"
    #     ResendLastMSGOnReconnect="on"
    # )
    # # forward to remote rsyslog server using relp
    #action(
    #    type="omrelp"
    #    target=`echo $FWD_TO_HOST`
    #    port=`echo $FWD_TO_PORT`
    #    action.reportSuspension="on"
    #    action.reportSuspensionContinuation="on"
    #    action.resumeInterval="30"
    #    action.resumeRetryCount="-1"
    #    queue.SpoolDirectory="/var/spool/rsyslog"
    #    queue.filename="rsyslog-relp-rule-local"  # unique name prefix for spool files
    #    queue.highwatermark="13000"
    #    queue.lowwatermark="50"
    #    queue.maxdiskspace="256m"
    #    queue.saveonshutdown="on"
    #    queue.size="15000"
    #    queue.type="LinkedList"
    #)
}

# Host machine logs
# For systemd users, receive messagees from journald of the host
# machine, outside of the docker container. The socket parentdir
# needs to be bind mounted inside, it must not exist beforehand.
# add in /etc/systemd/journald.conf
#
# [Journal]
# ForwardToSyslog=yes
#
# and restart systemd.journald.service
# then uncomment the following input
input (
    type="imuxsock"
    Socket="/run/systemd/journal/syslog"
    # not needed if setting
    # docker hostname the same as host machine
    # HostName=`echo $SYS_HOSTNAME`
    ruleset="LocalMachine"
)

# }}}

#### Logs from UDP / RELP / TCP Listeners ####
# {{{

# log remote by hostname
template(name="DynaFileRemoteMachine" type="string" string="/var/log/remote/%HOSTNAME%/%PROGRAMNAME%.log")

ruleset(name="RemoteMachine"){
    # fix utf8
    action(name="main_utf8fix" type="mmutf8fix" replacementChar="?")
    # dynamic file log by hostname
    action(
        type="omfile"
        dynaFile="DynaFileRemoteMachine"
        createDirs="on"
        template="OutFormat"
        dynaFileCacheSize="512"
        flushOnTXEnd="off"
        asyncWriting="on"
        flushInterval="1"
        ioBufferSize="64k"
    )
    # # forward to remote rsyslog server using udp
    # action(
    #     type="omfwd"
    #     target=`echo $FWD_TO_HOST`
    #     port=`echo $FWD_TO_PORT`
    #     protocol=`echo $FWD_PROTOCOL`
    #     action.reportSuspension="on"
    #     action.reportSuspensionContinuation="on"
    #     action.resumeInterval="30"
    #     action.resumeRetryCount="-1"
    #     queue.SpoolDirectory="/var/spool/rsyslog"
    #     queue.filename="rsyslog-fwd-rule-remote"  # unique name prefix for spool files
    #     queue.highwatermark="13000"
    #     queue.lowwatermark="50"
    #     queue.maxdiskspace="256m"
    #     queue.saveonshutdown="on"
    #     queue.size="15000"
    #     queue.type="LinkedList"
    #     ResendLastMSGOnReconnect="on"
    # )
    # # forward to remote rsyslog server using relp
    action(
        type="omrelp"
        target=`echo $FWD_TO_HOST`
        port=`echo $FWD_TO_PORT`
        action.reportSuspension="on"
        action.reportSuspensionContinuation="on"
        action.resumeInterval="30"
        action.resumeRetryCount="-1"
        queue.SpoolDirectory="/var/spool/rsyslog"
        queue.filename="rsyslog-relp-rule-remote"  # unique name prefix for spool files
        queue.highwatermark="13000"
        queue.lowwatermark="50"
        queue.maxdiskspace="256m"
        queue.saveonshutdown="on"
        queue.size="15000"
        queue.type="LinkedList"
    )
}

# Receive messages from remote host via TCP
# for parameters see http://www.rsyslog.com/doc/imtcp.html
# input(type="imtcp" port="514" ruleset="RemoteMachine")

# Receive messages from remote host via UDP, could also be used by
# docker containers running in same machine. for parameters see
# http://www.rsyslog.com/doc/imudp.html
input(type="imudp" port="514" ruleset="RemoteMachine")

# # Receive messages from remote hosts via RELP
# input(type="imrelp" port="2514" maxDataSize="10k" ruleset="RemoteMachine")

# }}}

#### Other Examples ####

# from version 8.41
# module(load="imdocker"
#         DockerApiUnixSockAddr="/var/run/docker.sock"
#         ApiVersionStr="v1.27"
#         PollingInterval="60"
#         ListContainersOptions="filters={\"label\":[\"log_opt_enabled\"]}"
#         GetContainerLogOptions="timestamps=0&follow=1&stdout=1&stderr=0&tail=1"
#       )
#
# template (name="ImdockerFormat" type="string"
#         string="program:%programname% tag:%syslogtag% id:%$!metadata!Id% name:%$!metadata!Names% imageid:%$!metadata!ImageID% labels:%$!metadata!Labels% msg: %msg%\n"
#         )

