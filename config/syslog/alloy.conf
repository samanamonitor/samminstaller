logging {
  level  = "warn"
  format = "logfmt"
}
livedebugging {
  enabled = false
}
// Listener for receiving Syslog messages
loki.source.syslog "local" {
  listener {
    address  = "0.0.0.0:51893"
    protocol = "udp"
    labels   = { component = "loki.source.syslog", protocol = "udp" }
  }
  forward_to = [loki.write.local.receiver]
  relabel_rules = loki.relabel.syslog_labels.rules
}
// This block extracts the default syslog labels from any syslog source.
loki.relabel "syslog_labels" {
  forward_to = []
  rule {
    source_labels = ["__syslog_message_severity"]
    target_label  = "severity"
  }
  rule { 
    source_labels = ["__syslog_message_hostname"]
    target_label  = "hostname"
  }
  rule {
    source_labels = ["__syslog_message_app_name"]
    target_label  = "appname"
  }
  rule {
    source_labels = ["__syslog_message_proc_id"]
    target_label  = "procid"
  }
  rule {
    source_labels = ["__syslog_message_msg_id"]
    target_label  = "msgid"
  }
  rule {
    source_labels = ["__syslog_connection_hostname"]
    target_label  = "dnsname"
  }
}
// Listener for SNMP Traps that have been converted to Syslog.
loki.source.syslog "snmptrap" {
  listener {
    address  = "0.0.0.0:51894"
    protocol = "udp"
    labels   = { component = "loki.source.snmp", protocol = "udp" }
  }
  // Forwards messaged to label extractor
  forward_to = [loki.process.regex_label_snmptrapd.receiver]
}
/* This block drops non-snmp traps, and extracts the labels
   for severity, source, and category from the forwarded traps
   one selector for each type of device, starting with NetScaler
   and XenServer */
loki.process "regex_label_snmptrapd" {
  // Forwards everything to Loki
  forward_to = [loki.write.local.receiver]
  stage.drop {
    //Drops the SNMPTrapd start message
    expression = `NET-SNMP version 5.9.4.*`//This regex removes non-relevant entries
    drop_counter_reason = "irrelevant"
  }
  // Assigns an MIB Type Label for Device type assignment, and add it to the "snmptrapd_mibtype" label
  stage.regex {
    // This expression looks for the "OID: NS-ROOT-MIB::" text to match
    expression = `(.*OID\:\s(?P<snmptrapd_mibtype>NS\-ROOT\-MIB)\:\:.*)`
  }
  stage.regex {
    // This expression looks for the "OID: XENSERVER-MIB::" text to match
    expression = `(.*OID\:\s(?P<snmptrapd_mibtype>XENSERVER\-MIB)\:\:.*)`
  }
  stage.labels {
    // maps the extracted OID to the "snmptrapd_mibtype" label
    values = {snmptrapd_mibtype  = "snmptrapd_mibtype",}
  }
  /* Further processing after determining the device type, and matching each device type with their own set of rules */
  stage.match {
    // Selecting XenServer SNMP Traps for further evaluation and Labeling
    selector = "{snmptrapd_mibtype=\"XENSERVER-MIB\"}"
    stage.regex {
      expression = `((?P<snmptrapd_sourceip>\d*\.\d*\.\d*\.\d*).*OID\:\s(?P<snmptrapd_mibtype>XENSERVER-MIB)\:\:(?P<snmptrapd_category>\w+).*(severityLevel\s=\sINTEGER:\s|messagePriority\.0\s\=\sINTEGER\:\s)(?P<snmptrapd_severity>\w+\(\d*\)).*)`
    }
  }
  stage.match {
    // Selecting NetScaler SNMP Traps for further evaluation and Labeling
    selector = "{snmptrapd_mibtype=\"NS-ROOT-MIB\"}"
    stage.regex {
      expression = `((?P<snmptrapd_sourceip>\d*\.\d*\.\d*\.\d*).*OID\:\s(?P<snmptrapd_mibtype>NS-ROOT-MIB)\:\:(?P<snmptrapd_category>\w+).*(severityLevel\s=\sINTEGER:\s|messagePriority\.0\s\=\sINTEGER\:\s)(?P<snmptrapd_severity>\w+\(\d*\)).*)`
    }
  }
  // Assing labels for the extracted values in the previous steps
  stage.labels {
    values = {
      snmptrapd_sourceip  = "snmptrapd_sourceip",
      snmptrapd_category = "snmptrapd_category",
      snmptrapd_severity = "snmptrapd_severity",
    }
  }
  /*
  Additional processing for unifying the severity values in one standard SAMM severity value:
  Severity Values:
    1: Critical
    2: Major
    3: Minor
    4: Warning
    5: Informational
    6: Unknown
  */
  /*
  Begin section for NetScaler severity remapping
  */
  stage.match {
    selector = "{snmptrapd_mibtype=\"NS-ROOT-MIB\", snmptrapd_severity=\"critical(1)\"}"
    stage.static_labels { values = { samm_severity = "1", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"NS-ROOT-MIB\", snmptrapd_severity=\"major(2)\"}"
    stage.static_labels { values = { samm_severity = "2", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"NS-ROOT-MIB\", snmptrapd_severity=\"minor(4)\"}"
    stage.static_labels { values = { samm_severity = "3", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"NS-ROOT-MIB\", snmptrapd_severity=\"warning(8)\"}"
    stage.static_labels { values = { samm_severity = "4", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"NS-ROOT-MIB\", snmptrapd_severity=\"informational(16)\"}"
    stage.static_labels { values = { samm_severity = "5", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"NS-ROOT-MIB\", snmptrapd_severity=\"unknown(32)\"}"
    stage.static_labels { values = { samm_severity = "6", } }
  }
  /*
  Begin section for XenServer severity remapping
  */
  stage.match {
    selector = "{snmptrapd_mibtype=\"XENSERVER-MIB\", snmptrapd_severity=\"critical(1)\"}"
    stage.static_labels { values = { samm_severity = "1", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"XENSERVER-MIB\", snmptrapd_severity=\"major(2)\"}"
    stage.static_labels { values = { samm_severity = "2", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"XENSERVER-MIB\", snmptrapd_severity=\"minor(3)\"}"
    stage.static_labels { values = { samm_severity = "3", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"XENSERVER-MIB\", snmptrapd_severity=\"warning(4)\"}"
    stage.static_labels { values = { samm_severity = "4", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"XENSERVER-MIB\", snmptrapd_severity=\"information(5)\"}"
    stage.static_labels { values = { samm_severity = "5", } }
  }
  stage.match {
    selector = "{snmptrapd_mibtype=\"XENSERVER-MIB\", snmptrapd_severity=\"unknown(6)\"}"
    stage.static_labels { values = { samm_severity = "6", } }
  }
  // Dropping the original severity, as it is not needed anymore
  stage.label_drop {
    values = [ "snmptrapd_severity"]
  }
}
// Loki Endpoint where everything is sent at the end
loki.write "local" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}
